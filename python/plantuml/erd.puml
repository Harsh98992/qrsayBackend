@startuml


entity Customer {
    * id: ObjectId <<primary_key>>
    * email: String
    * name: String
    * phoneNumber: String
    * password: String
    * addresses: [AddressSchema]
    * pastLocations: [AddressSchema]
    * socialLogin: String
    * previousRestaurant: [PreviousRestaurantSearch]
}

entity IdentifierOTP {
    * id: ObjectId <<primary_key>>
    * identifier: String
    * otp: String
    * firstAttempt: Date
    * attempts: Number
    * identifierVerified: Boolean
    * otpCreatedAt: Date
}

entity Order {
    * id: ObjectId <<primary_key>>
    * customer: Customer <<foreign_key>>
    * restaurant: Restaurant <<foreign_key>>
    * orderId: String
    * customerName: String
    * orderDate: Date
    * orderDetails: [OrderDetailSchema]
    * customerEmail: String
    * customerPreferences: Mixed
    * orderStatus: String
    * customerPhoneNumber: String
    * reason: String
    * payment_order_id: String
    * payment_id: String
    * cashOnDeliveryAvailable: Boolean
    * payment_signature: String
}

entity PromoCode {
    * id: ObjectId <<primary_key>>
    * restaurant: Restaurant <<foreign_key>>
    * promoCodes: [IndividualPromoCodeSchema]
}

entity Restaurant {
    * id: ObjectId <<primary_key>>
    * restaurantName: String
    * restaurantVerified: Boolean
    * restaurantUrl: String
    * restaurantBackgroundImage: String
    * restaurantPhoneNumber: String
    * restaurantEmail: String
    * restaurantStatus: String
    * restaurantType: []
    * restaurantImages: []
    * address: AddressSchema
    * openTime: {}
    * closeTime: {}
    * gstNumber: String
    * isPricingInclusiveOfGST: Boolean
    * customGSTPercentage: Number
    * placeId: String
    * addOns: [AddOnSchema]
    * dishChoices: [ChoicesSchema]
    * fssaiLicenseNumber: String
    * social_links: [SocialSchema]
    * cuisine: [CategorySchema]
    * contact: [ContactSchema]
}

entity Table {
    * id: ObjectId <<primary_key>>
    * restaurant: Restaurant <<foreign_key>>
    * tables: [{
        tableName: String,
        isAvailable: Boolean,
        orderId: ObjectId,
        customerId: ObjectId,
        capacity: Number,
        tableType: String,
    }]
}

entity User {
    * id: ObjectId <<primary_key>>
    * name: String
    * restaurant: Restaurant <<foreign_key>>
    * email: String
    * phoneNumber: String
    * role: String
    * password: String
    * passwordChangedAt: Date
    * passwordResetToken: String
    * passwordResetExpires: Date
    * emailOtp: String
    * emailVerified: Boolean
    * active: Boolean
}
' Type Symbol
' Zero or One |o--
' Exactly One ||--
' Zero or Many }o--
' One or Many }|--

Customer ||--o{ Order
Customer ||--o{ IdentifierOTP
Restaurant ||--o{ Order
Restaurant ||--o{ PromoCode
Restaurant ||--o{ Table
Restaurant ||--o{ User


@enduml

erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }


erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }